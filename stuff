require 'lib/tile.rb'
require 'lib/floor.rb'
require 'lib/wall.rb'
require 'lib/player.rb'

class Map 
    attr_accessor :position, :player
    def initialize args
        setup_level(args)
        @position = passable_tile args
        @player = Player.new(position.x, position.y,  "images/barbarian.png")
    end

    def serialize 
        { }
    end

    def inspect 
        serialize.to_s
    end

    def to_s
        serialize.to_s
    end

    # def check_for_connected_tiles
    #     until true do
    #         generate_tiles == passable_tile.get_connected_tiles.length 
    #     end
    # end

    def generate_tiles args
        # solid_tiles = 0
        for i in 0..args.state.grid_size do
            args.state.tiles[i] = []
            for j in 0..args.state.grid_size do
                if rand() < 0.3 || !in_bounds(args, i, j)
                    args.state.tiles[i][j] = Wall.new(i, j)
                else
                    args.state.tiles[i][j] = Floor.new(i, j)
                    # solid_tiles += 1
                end
            end
        end
        # return solid_tiles
    end
    
    def in_bounds args, x, y
        return x > 0 && y > 0 && x < args.state.grid_size - 1 && y < args.state.grid_size - 1;
    end
    
    def get_tile args, x, y 
        if(in_bounds(args, x, y))
            return args.state.tiles[x][y]
        else
            return Wall.new(x, y)
        end
    end
    
    def render_level args
        for i in 0..args.state.grid_size do
            for j in 0..args.state.grid_size do
                get_tile(args, i, j).render_tile(args)
            end
        end
    end

    def setup_level args
        # check_for_connected_tiles
        generate_tiles args
    end
 
    # Finds a random tile and returns its.
    def random_tile args
        x = random_range(0, args.state.grid_size - 1)
        y = random_range(0, args.state.grid_size - 1)
        return get_tile(args, x, y)
    end
    
    # Keeps checking for a solid tile. Then returns it
    def passable_tile args
        tile = random_tile args
        until tile.solid do
            tile = random_tile args
        end
        return tile
    end
    
    # Gets a random range
    def random_range(min, max)
        (rand * (max - min + 1) + min).floor
    end



    def tick args
        render_level args
        @player.player_controller args
    end
end

////////////////////////////////////////////////////////////

class Tile
    attr_accessor :x, :y, :solid

    def initialize x, y, sprite, solid
        @x = x
        @y = y
        @sprite = sprite
        @solid = solid
    end

    def serialize 
        { }
    end

    def inspect 
        seriealize.to_s
    end

    def to_s
        serialize.to_s
    end

    # def get_neighboring_tiles(dx, dy)
    #     return get_tile(@x + dx, @y + dy)
    # end

    # def get_adjacent_tiles() 
    #     return shuffle_tiles([
    #         self.get_neighboring_tiles(0, -1),
    #         self.get_neighboring_tiles(0, 1),
    #         self.get_neighboring_tiles(-1, 0),
    #         self.get_neighboring_tiles(1, 0)
    #     ])
    # end

    # def get_adjacent_solid_neighbors
    #     return self.get_adjacent_tiles.select(&:solid)
    # end

    # def get_connected_tiles 
    #     connected_tiles = [self]
    #     frontier = [self]
    #     while (frontier.length)
    #         neighbors = frontier.pop().get_adjacent_solid_neighbors().select { |tile| !connected_tiles.include?(tile) }
    #         connected_tiles = connected_tiles.concat(neighbors)
    #         frontier = frontier.concat(neighbors)
    #     end
    #     return connected_tiles
    # end

    def render_tile args
        args.outputs.sprites << [@x * 80, @y * 80, 80, 80, @sprite]
    end
end


/// Main ///////////////////


require "lib/map.rb"

def init args 
    args.state.tile_size ||= 80
    args.state.grid_size ||= 9
    args.state.game ||= Map.new(args)
    args.state.game.tick(args)
end


# def shuffle_tiles(array)
#     temp
#     random
#     for i in 0..array.length do
#         random = random_range(0, i)
#         temp = array[random]
#         array[i] = array[random]
#         array[random] = temp
#     end
#     return array
# end
# def player_controller args
#     if args.inputs.keyboard.key_down.up 
#         args.state.player_y += 80
#     end

#     if args.inputs.keyboard.key_down.down
#         args.state.player_y -= 80
#     end

#     if args.inputs.keyboard.key_down.left 
#         args.state.player_x -= 80
#      end

#     if args.inputs.keyboard.key_down.right
#         args.state.player_x += 80
#     end

#     # Render the player.
#     render_sprite args, args.state.player_x, args.state.player_y, "images/barbarian.png"
# end

def render_sprite args, x, y, sprite
    args.outputs.sprites << [x, y, args.state.tile_size, args.state.tile_size, sprite]
end

# Generate a blank background -- "Off white color"
def render_background args
    args.outputs.solids << [0, 0, 1280, 720, 255, 250, 240, 255]

end

# Main part of the program
def tick args
    init args
    # player_controller args
end